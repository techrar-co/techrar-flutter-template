// This file is "location.dart"
import 'package:freezed_annotation/freezed_annotation.dart';
import 'package:techrar_captain/app/location/models/city.dart';

import '../../../core/localization/constants.dart';

// required: associates our `location.dart` with the code generated by Freezed
part 'location.freezed.dart';
// optional: Since our Location class is serializable, we must add this line.
// But if Location was not serializable, we could skip it.
part 'location.g.dart';

@freezed
class Location with _$Location {
  const Location._();
  const factory Location({
    @JsonKey(name: "id") required int id,
    @JsonKey(name: "city") required City city,
    @JsonKey(name: "location_url") required String locationUrl,
    @JsonKey(name: "created_at") required DateTime createdAt,
    @JsonKey(name: "modified_at") required DateTime modifiedAt,
    @JsonKey(name: "ordering") required int ordering,
    @JsonKey(name: "name_ar") required String nameAr,
    @JsonKey(name: "name_en") required String nameEn,
    @JsonKey(name: "longitude") required String longitude,
    @JsonKey(name: "latitude") required String latitude,
    @JsonKey(name: "address1") required String? address1,
    @JsonKey(name: "address2") required String? address2,
    @JsonKey(name: "place_id") required String? placeId,
    @JsonKey(name: "postal_code") required String? postalCode,
    @JsonKey(name: "formatted_address") required String? formattedAddress,
    @JsonKey(name: "district") required String? districtEn,
    @JsonKey(name: "district_ar") required String? districtAr,
    @JsonKey(name: "city_name_en") required String? cityNameEn,
    @JsonKey(name: "city_name_ar") required String? cityNameAr,
    @JsonKey(name: "route") required String? route,
    @JsonKey(name: "street_number") required String? streetNumber,
    @JsonKey(name: "image") required String? image,
    @JsonKey(name: "type") @Default('work') String type,
    @JsonKey(name: "description") @Default('-') String description,
  }) = _Location;

  String get name => isArabic() ? nameAr : nameEn;
  String? get district => (isArabic() ? districtAr : districtEn) ?? districtEn;
  String get address {
    final address = [city.name, district, route, postalCode];
    address.removeWhere((element) => element == null);
    if (address.length < 3) return formattedAddress ?? address.join(', ');
    return address.join(', ');
  }

  factory Location.fromJson(Map<String, Object?> json) => _$LocationFromJson(json);
}

enum LocationType {
  @JsonValue("home")
  home,
  @JsonValue("work")
  work,
  @JsonValue("friend_house")
  friend_house,
  @JsonValue("other")
  other,
}
